default_platform(:ios)

project = 'RASqlite.xcodeproj'
scheme_default = 'RASqlite'

path_to_reports_directory = 'build/reports'
path_to_compile_commands = "#{path_to_reports_directory}/compile_commands.json"

platform :ios do
  desc 'Lint project files'
  lane :lint do |options|
    oclint_report_type = options[:oclint_report_type] || 'xml'

    clean_release_build
    oclint(
      compile_commands: path_to_compile_commands,
      report_path: "#{path_to_reports_directory}/oclint.#{oclint_report_type}",
      report_type: oclint_report_type,
      max_priority_1: 0,
      max_priority_2: 41,
      max_priority_3: 58,
      exclude_regex: /_vers.c/
    )
  end

  desc 'Build a release version of the framework'
  lane :clean_release_build do
    xcodebuild(
      scheme: scheme_default,
      configuration: 'Release',
      clean: true,
      build: true,
      build_settings: [['ONLY_ACTIVE_ARCH', 'NO']],
      buildlog_path: 'build',
      xcpretty_output: "simple -r json-compilation-database -o #{path_to_compile_commands}"
    )
  end

  desc 'Run tests and generate coverage reports'
  lane :test do |options|
    xcov_report_type = options[:xcov_report_type] || 'json'

    scan(
      scheme: scheme_default,
      code_coverage: true,
      output_directory: path_to_reports_directory,
      output_types: 'junit',
      output_files: 'TEST-report.xml'
    )
    xcov(
      project: project,
      scheme: scheme_default,
      output_directory: path_to_reports_directory,
      html_report: xcov_report_type =~ /html/i,
      json_report: xcov_report_type =~ /json/i,
      markdown_report: xcov_report_type =~ /markdown/i
    )
  end
end
