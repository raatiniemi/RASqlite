default_platform(:ios)

project_name = 'RASqlite'
project = "#{project_name}.xcodeproj"
target_name = project_name
scheme_default = project_name
source_directory = project_name

path_to_reports_directory = 'sonar-reports'
path_to_compile_commands = "#{path_to_reports_directory}/compile_commands.json"
path_to_oclint_report = "#{path_to_reports_directory}/oclint.xml"
path_to_lizard_report = "#{path_to_reports_directory}/lizard.xml"

environment_sonar_login = 'SONAR_LOGIN'
environment_sonar_host_url = 'SONAR_HOST_URL'

platform :ios do
  lane :metrics do
    generate_oclint_report
    generate_lizard_report
    generate_surefire_report
    generate_cobertura_report

    send_generated_reports_to_sonarqube
  end

  private_lane :generate_compile_commands_for_oclint do
    xcodebuild(
      scheme: scheme_default,
      configuration: 'Release',
      clean: true,
      build: true,
      build_settings: [['ONLY_ACTIVE_ARCH', 'NO']],
      buildlog_path: 'build',
      xcpretty_output: "simple -r json-compilation-database -o #{path_to_compile_commands}"
    )
  end

  private_lane :generate_oclint_report do
    generate_compile_commands_for_oclint
    oclint(
      compile_commands: path_to_compile_commands,
      report_path: path_to_oclint_report,
      report_type: 'xml',
      max_priority_1: 0,
      max_priority_2: 43,
      max_priority_3: 58,
      exclude_regex: /_vers.c/
    )
  end

  private_lane :generate_lizard_report do
    lizard(
      source_folder: source_directory,
      language: 'objectivec',
      export_type: 'xml',
      report_file: path_to_lizard_report,
      executable: "#{ENV["HOME"]}/Library/Python/2.7/bin/lizard"
    )
  end

  private_lane :generate_surefire_report do
    scan(
      scheme: scheme_default,
      code_coverage: true,
      output_directory: path_to_reports_directory,
      output_types: 'junit',
      output_files: 'TEST-report.xml'
    )
  end

  private_lane :generate_cobertura_report do
    slather(
      proj: project,
      scheme: scheme_default,
      output_directory: path_to_reports_directory,
      cobertura_xml: true,
      source_directory: source_directory
    )
  end

  private_lane :send_generated_reports_to_sonarqube do
    login = ENV[environment_sonar_login]
    if login.nil? || login.empty?
      UI.user_error!("No login credentials have been supplied via environment variable `#{environment_sonar_login}`")
    end

    host_url = ENV[environment_sonar_host_url]
    if host_url.nil? || host_url.empty?
      UI.user_error!("No host URL have been supplied via environment variable `#{environment_sonar_host_url}`")
    end

    sonar(
      project_version: get_version_number(target: target_name),
      sonar_login: login,
      sonar_runner_args: "-Dsonar.host.url=#{host_url}"
    )
  end
end
